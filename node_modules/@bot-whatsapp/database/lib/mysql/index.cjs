/** 
* NO TOCAR ESTE ARCHIVO: Es generado automaticamente, si sabes lo que haces adelante ;)
* de lo contrario mejor ir a la documentacion o al servidor de discord link.codigoencasa.com/DISCORD
*/
'use strict';

var require$$0 = require('mysql2');

const mysql = require$$0;

class MyslAdapter {
    db
    listHistory = []
    credentials = { host: null, user: null, database: null, password: null }

    constructor(_credentials) {
        this.credentials = _credentials;
        this.init().then();
    }

    async init() {
        this.db = mysql.createConnection(this.credentials);

        await this.db.connect(async (error) => {
            if (!error) {
                console.log(`Solicitud de conexi贸n a base de datos exitosa`);
                await this.checkTableExists();
            }

            if (error) {
                console.log(`Solicitud de conexi贸n fallida ${error.stack}`);
            }
        });
    }

    /*async init() {
        try {
            this.db = mysql.createPool(this.credentials);
            await this.db.promise().getConnection(); // Conectar a la base de datos
            console.log("Conexi贸n a la base de datos exitosa");
            await this.checkTableExists();
        } catch (error) {
            console.error(`Error en la conexi贸n a la base de datos: ${error.stack}`);
        }
    }*/

    getPrevByNumber = async (from) => {
        if (this.db._closing) await this.init(); 
        return await new Promise((resolve, reject) => {
            const sql = `SELECT * FROM history WHERE phone='${from}' ORDER BY id DESC`;
            this.db.query(sql, (error, rows) => {
                if (error) {
                    reject(error);
                }

                if (rows.length) {
                    const [row] = rows;
                    row.options = JSON.parse(row.options);
                    resolve(row);
                }

                if (!rows.length) {
                    resolve(null);
                }
            });
        })
    }

    save = (ctx) => {
        const values = [
             [ctx.ref, ctx.keyword, ctx.answer, ctx.refSerialize, ctx.from, JSON.stringify(ctx.options), null],
        ];
        const sql = 'INSERT INTO history (ref, keyword, answer, refSerialize, phone, options, created_at) values ?';

        this.db.query(sql, [values], (err) => {
            if (err) throw err
            //console.log('Guardado en DB...', values);
        });
    }


    createTable = () =>
        new Promise((resolve) => {
            const tableName = 'history';

            const sql = `CREATE TABLE ${tableName} 
            (id INT AUTO_INCREMENT PRIMARY KEY, 
            ref varchar(255) NOT NULL,
            keyword varchar(255) NULL,
            answer longtext NOT NULL,
            refSerialize varchar(255) NOT NULL,
            phone varchar(255) NOT NULL,
            options longtext NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP) 
            CHARACTER SET utf8mb4 COLLATE utf8mb4_General_ci`;

            this.db.query(sql, (err) => {
                if (err) throw err
                console.log(`Tabla ${tableName} creada correctamente `);
                resolve(true);
            });
        })

         obtenerNegocio = () => {
            return new Promise((resolve, reject) => {
                const sql = 'SELECT * FROM negocios WHERE id = 1';
                this.db.query(sql, (error, results) => {
                    if (error) {
                        reject(error);
                    }
                    resolve(results);
                });
            });
        };

        obtenerMenu = () => {
            return new Promise((resolve, reject) => {
                const sql = 'CALL ObtenerMenu()';
                this.db.query(sql, (error, results) => {
                    if (error) {
                        reject(error);
                    }
                    resolve(results);
                });
            });
        };
        
        limpiarTablaHistory = () => {
            return new Promise((resolve, reject) => {
                const sql = 'DELETE FROM history';
                this.db.query(sql, (error, results) => {
                    if (error) {
                        reject(error);
                    }
                    resolve(results);
                });
            });
        };
        


        /*obtenerMenu = () => {
            return new Promise((resolve, reject) => {
                const sql = 'SELECT * FROM menu_negocio WHERE id_negocio = 1';
                this.db.query(sql, (error, results) => {
                    if (error) {
                        reject(error);
                    }
                    resolve(results);
                });
            });
        };*/


         obtenerFechaHoraDesdeMySQL = () => {
            return new Promise((resolve, reject) => {
                const sql = 'SELECT NOW() AS fechaHora';
                this.db.query(sql, (error, results) => {
                    if (error) {
                        reject(error);
                    }
                    resolve(results[0].fechaHora);
                });
            });
        };

         getDayOfWeek = () => {
            return new Promise((resolve, reject) => {
                const sql = 'SELECT DAYOFWEEK(CURDATE()) as day_of_week';
                this.db.query(sql, (error, results) => {
                    if (error) {
                        reject(error);
                    }
                    resolve(results[0].day_of_week);
                });
            });
        };

        insertPedido = (ctx) => {
            const values = [
                ctx.id_negocio,
                ctx.fecha,
                ctx.telefono,
                ctx.nombre,
                ctx.descripcion,
                ctx.tipo_envio,
                ctx.direccion,
                ctx.sugerencia
            ];
        
            const sql_pedido = 'CALL InsertarPedido(?, ?, ?, ?, ?, ?, ?, ?)';
        
            this.db.query(sql_pedido, values, (err) => {
                if (err) throw err;
                //console.log('Guardado en DB pedido...', values);
            });
        }
        


    checkTableExists = () =>
        new Promise((resolve) => {
            const sql = "SHOW TABLES LIKE 'history'";

            this.db.query(sql, (err, rows) => {
                if (err) throw err

                if (!rows.length) {
                    this.createTable();
                }

                resolve(!!rows.length);
            });
        })
}

var mysql_1 = MyslAdapter;

module.exports = mysql_1;
